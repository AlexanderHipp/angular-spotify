{"name":"angular-spotify","tagline":"Angular Service to connect to Spotify Web API","body":"# angular-spotify [![Build Status](https://travis-ci.org/eddiemoore/angular-spotify.svg?branch=master)](https://travis-ci.org/eddiemoore/angular-spotify) [![Coverage Status](https://img.shields.io/coveralls/eddiemoore/angular-spotify.svg)](https://coveralls.io/r/eddiemoore/angular-spotify) [![devDependency Status](https://david-dm.org/eddiemoore/angular-spotify/dev-status.svg)](https://david-dm.org/eddiemoore/angular-spotify#info=devDependencies)\r\n\r\nangular service to connect to the [Spotify Web API](https://developer.spotify.com/web-api/)\r\n\r\nangular-spotify makes heavy use of promises throughout the service\r\n\r\n## Usage\r\n\r\nInstall angular-spotify via bower. Use the --save property to save into your bower.json file.\r\n```shell\r\nbower install angular-spotify --save\r\n```\r\n\r\nInclude spotify into your angular module\r\n```javascript\r\nvar app = angular.module('example', ['spotify']);\r\n```\r\n\r\nMost of the functions in Spotify do not require you to authenticate your application. However if you do need to gain access to playlists or a user's data then configure it like this:\r\n```javascript\r\napp.config(function (SpotifyProvider) {\r\n  SpotifyProvider.setClientId('<CLIENT_ID>');\r\n  SpotifyProvider.setRedirectUri('<CALLBACK_URI>');\r\n  SpotifyProvider.setScope('<SCOPE>');\r\n});\r\n```\r\nFor example:\r\n```javascript\r\napp.config(function (SpotifyProvider) {\r\n  SpotifyProvider.setClientId('ABC123DEF456GHI789JKL');\r\n  SpotifyProvider.setRedirectUri('http://www.example.com/callback.html');\r\n  SpotifyProvider.setScope('user-read-private playlist-read-private playlist-modify-private playlist-modify-public');\r\n});\r\n```\r\n\r\n\r\nInject Spotify into a controller to gain access to all the functions available\r\n```javascript\r\napp.controller('MainCtrl', function (Spotify) {\r\n\r\n});\r\n```\r\n\r\n\r\n###Search\r\n####Search for an Item\r\nGet Spotify catalog information about artists, albums, or tracks that match a keyword string.\r\n```javascript\r\nSpotify.search('Search Query', 'type', options);\r\n```\r\ntype - Required. A comma-separated list of item types to search across. Valid types are: album, artist, and track.\r\n\r\n#####Options Object (Optional)\r\n - limit - Optional. The maximum number of objects to return. Default: 20. Minimum: 1. Maximum: 50. \r\n - offset - Optional. The index of the first object to return. Default: 0 (i.e., the first object). Use with limit to get the next set of objects.\r\n\r\nExample:\r\n```javascript\r\nSpotify.search('Nirvana', 'artist').then(function (data) {\r\n  console.log(data);\r\n});\r\n```\r\n\r\n\r\n\r\n###Albums\r\n\r\n####Get an Album\r\nGet Spotify catalog information for a single album.\r\n```javascript\r\nSpotify.getAlbum('AlbumID or Spotify Album URI');\r\n```\r\nExample:\r\n```javascript\r\nSpotify.getAlbum('0sNOF9WDwhWunNAHPD3Baj').then(function (data) {\r\n  console.log(data);\r\n});\r\n```\r\n\r\n\r\n####Get Several Albums\r\nGet Spotify catalog information for multiple albums identified by their Spotify IDs.\r\n```javascript\r\nSpotify.getAlbums('Array or comma separated list of Album IDs');\r\n```\r\nExample:\r\n```javascript\r\nSpotify.getAlbums('41MnTivkwTO3UUJ8DrqEJJ,6JWc4iAiJ9FjyK0B59ABb4,6UXCm6bOO4gFlDQZV5yL37').then(function (data) {\r\n  console.log(data);\r\n});\r\n```\r\n\r\n\r\n####Get an Album’s Tracks\r\nGet Spotify catalog information about an album’s tracks. Optional parameters can be used to limit the number of tracks returned.\r\n```javascript\r\nSpotify.getAlbumTracks('AlbumID or Spotify Album URI', options);\r\n```\r\n#####Options Object (Optional)\r\n - limit - Optional. The maximum number of tracks to return. Default: 20. Minimum: 1. Maximum: 50.\r\n - offset - Optional. The index of the first track to return. Default: 0 (the first object). Use with limit to get the next set of tracks.\r\n\r\nExample:\r\n```javascript\r\nSpotify.getAlbumTracks('6akEvsycLGftJxYudPjmqK').then(function (data) {\r\n  console.log(data);\r\n});\r\n```\r\n\r\n\r\n###Artists\r\n####Get an Artist\r\nGet Spotify catalog information for a single artist identified by their unique Spotify ID or Spotify URI.\r\n\r\n```javascript\r\nSpotify.getArtist('Artist Id or Spotify Artist URI');\r\n```\r\nExample\r\n```javascript\r\nSpotify.getArtist('0LcJLqbBmaGUft1e9Mm8HV').then(function (data) {\r\n  console.log(data);\r\n});\r\n```\r\n\r\n####Get Several Artists\r\nGet Spotify catalog information for several artists based on their Spotify IDs.\r\n```javascript\r\nSpotify.getArtists('Comma separated string or array of Artist Ids');\r\n```\r\nExample:\r\n```javascript\r\nSpotify.getArtists('0oSGxfWSnnOXhD2fKuz2Gy,3dBVyJ7JuOMt4GE9607Qin').then(function (data) {\r\n  console.log(data);\r\n});\r\n```\r\n\r\n####Get an Artist’s Albums\r\nGet Spotify catalog information about an artist’s albums. Optional parameters can be passed in to filter and sort the response.\r\n```javascript\r\nSpotify.getArtistAlbums('Artist Id or Spotify Artist URI', options);\r\n```\r\n\r\n#####Options Object (Optional)\r\n - album_type - Optional A comma-separated list of keywords that will be used to filter the response. If not supplied, all album types will be returned. Valid values are:\r\n   - album\r\n   - single\r\n   - appears_on\r\n   - compilation\r\n\r\nExample: { album_type: 'album,single' }\r\n - country - Optional. An ISO 3166-1 alpha-2 country code. Supply this parameter to limit the response to one particular country. Note if you do not provide this field, you are likely to get duplicate results per album, one for each country in which the album is available!\r\n - limit - The number of album objects to return. Default: 20. Minimum: 1. Maximum: 50. For example: { limit: 2 }\r\n - offset - Optional. The index of the first album to return. Default: 0 (i.e., the first album). Use with limit to get the next set of albums. \r\n\r\n\r\nExample:\r\n```javascript\r\nSpotify.getArtistAlbums('1vCWHaC5f2uS3yhpwWbIA6').then(function (data) {\r\n  console.log(data);\r\n});\r\n```\r\n\r\n\r\n####Get an Artist’s Top Tracks\r\nGet Spotify catalog information about an artist’s top tracks by country.\r\n```javascript\r\nSpotify.getArtistTopTracks('Artist Id or Spotify Artist URI', 'Country Code');\r\n```\r\nThe country: an ISO 3166-1 alpha-2 country code. \r\nExample:\r\n```javascript\r\nSpotify.getArtistTopTracks('1vCWHaC5f2uS3yhpwWbIA6', 'AU').then(function (data) {\r\n  console.log(data);\r\n});\r\n```\r\n\r\n\r\n####Get an Artist’s Related Artists\r\nGet Spotify catalog information about artists similar to a given artist. Similarity is based on analysis of the Spotify community’s listening history.\r\n```javascript\r\nSpotify.getRelatedArtists('Artist Id or Spotify Artist URI');\r\n```\r\nExample:\r\n```javascript\r\nSpotify.getRelatedArtists('1vCWHaC5f2uS3yhpwWbIA6').then(function (data) {\r\n  console.log(data);\r\n});\r\n```\r\n\r\n\r\n\r\n###Tracks\r\n####Get a Track\r\nGet Spotify catalog information for a single track identified by its unique Spotify ID or Spotify URI.\r\n```javascript\r\nSpotify.getTrack('Track Id or Spotify Track URI');\r\n```\r\nExample:\r\n```javascript\r\nSpotify.getTrack('0eGsygTp906u18L0Oimnem').then(function (data) {\r\n  console.log(data);\r\n});\r\n```\r\n\r\n####Get Several Tracks\r\nGet Spotify catalog information for multiple tracks based on their Spotify IDs.\r\n```javascript\r\nSpotify.getTracks('Comma separated list or array of Track Ids');\r\n```\r\nExample:\r\n```javascript\r\nSpotify.getTracks('0eGsygTp906u18L0Oimnem,1lDWb6b6ieDQ2xT7ewTC3G').then(function (data) {\r\n  console.log(data);\r\n});\r\n```\r\n\r\n\r\n\r\n###Playlists\r\nUser needs to be logged in to gain access to playlists\r\n\r\n####Get a List of a User’s Playlists\r\nGet a list of the playlists owned by a Spotify user. Requires the ```playlist-read-private``` scope\r\n```javascript\r\nSpotify.getUserPlaylists('user_id', options);\r\n```\r\n#####Options Object (Optional)\r\n - limit - Optional. The maximum number of playlists to return. Default: 20. Minimum: 1. Maximum: 50. \r\n - offset - Optional. The index of the first playlist to return. Default: 0 (the first object). Use with limit to get the next set of playlists.\r\n\r\nExample:\r\n```javascript\r\nSpotify.getUserPlaylists('wizzler').then(function (data) {\r\n  console.log(data);\r\n});\r\n```\r\n\r\n####Get a Playlist\r\nGet a playlist owned by a Spotify user.\r\n```javascript\r\nSpotify.getPlaylist('user_id', 'playlist_id', options);\r\n```\r\n#####Options Object (Optional)\r\n - fields - Optional. Filters for the query: a comma-separated list of the fields to return. If omitted, all fields are returned. Sub-fields can be excluded by prefixing them with an exclamation mark. [More Info](https://developer.spotify.com/web-api/get-playlist/)\r\n\r\n```javascript\r\nSpotify.getPlaylist('1176458919', '6Df19VKaShrdWrAnHinwVO').then(function (data) {\r\n  console.log(data);\r\n});\r\n```\r\n\r\n\r\n####Get a Playlist’s Tracks\r\nGet full details of the tracks of a playlist owned by a Spotify user. Requires the ```playlist-read-private``` scope.\r\n```javascript\r\nSpotify.getPlaylistTracks('user_id', 'playlist_id', options);\r\n```\r\nExample:\r\n```javascript\r\nSpotify.getPlaylistTracks('1176458919', '6Df19VKaShrdWrAnHinwVO').then(function (data) {\r\n  console.log(data);\r\n});\r\n```\r\n\r\n####Create a Playlist\r\nCreate a playlist for a Spotify user. (The playlist will be empty until you add tracks.) Creating a public playlist requires the ```playlist-modify-public``` scope. Creating a private playlist requires the ```playlist-modify-private``` scope.\r\n```javascript\r\nSpotify.createPlaylist('user_id', options);\r\n```\r\n#####Options Object\r\n - name - string - Required. The name for the new playlist, for example \"Your Coolest Playlist\". This name does not need to be unique; a user may have several playlists with the same name.\r\n - public - boolean - Optional, default true. If true the playlist will be public, if false it will be private. To be able to create private playlists, the user must have granted the playlist-modify-private scope.\r\n\r\nExample:\r\n```javascript\r\nSpotify.createPlaylist('1176458919', { name: 'Awesome Mix Vol. 1' }).then(function (data) {\r\n  console.log('playlist created');\r\n});\r\n```\r\n\r\n\r\n####Add Tracks to a Playlist\r\nAdd one or more tracks to a user’s playlist. Adding tracks to a public playlist requires the ```playlist-modify-public``` scope. Adding tracks to a private playlist requires the ```playlist-modify-private``` scope.\r\n```javascript\r\nSpotify.addPlaylistTracks('user_id', 'playlist_id', 'comma separated string or array of spotify track uris');\r\n```\r\n#####Options Object (Optional)\r\n - position - integer - Optional. The position to insert the tracks, a zero-based index. For example, to insert the tracks in the first position: position=0; to insert the tracks in the third position: position=2. If omitted, the tracks will be appended to the playlist. Tracks are added in the order they are listed in the query string or request body.\r\n\r\nExample:\r\n```javascript\r\nSpotify\r\n  .addPlaylistTracks('1176458919', '2TkWjGCu8jurholsfdWtG4', 'spotify:track:4iV5W9uYEdYUVa79Axb7Rh, spotify:track:1301WleyT98MSxVHPZCA6M')\r\n  .then(function (data) {\r\n    console.log('tracks added to playlist');\r\n  });\r\n```\r\n\r\n\r\n####Remove Tracks from a Playlist\r\nRemove one or more tracks from a user’s playlist. Removing tracks from a public playlist requires the ```playlist-modify-public``` scope. Removing tracks from a private playlist requires the ```playlist-modify-private``` scope.\r\n```javascript\r\nSpotify.removePlaylistTracks('user_id', 'playlist_id', 'comma separated string or array of spotify track ids or uris');\r\n```\r\nExample:\r\n```\r\nSpotify\r\n  .removePlaylistTracks('1176458919', '2TkWjGCu8jurholsfdWtG4', 'spotify:track:4iV5W9uYEdYUVa79Axb7Rh, spotify:track:1301WleyT98MSxVHPZCA6M')\r\n  .then(function (data) {\r\n    console.log('tracks removed from playlist');\r\n  });\r\n```\r\n\r\n####Replace a Playlist’s Tracks\r\nReplace all the tracks in a playlist, overwriting its existing tracks. This powerful request can be useful for replacing tracks, re-ordering existing tracks, or clearing the playlist. Replacing tracks in a public playlist requires the ```playlist-modify-public``` scope. Replacing tracks in a private playlist requires the ```playlist-modify-private``` scope.\r\n```javascript\r\nSpotify.replacePlaylistTracks('user_id', 'playlist_id', 'comma separated string or array of spotify track ids or uris');\r\n```\r\nExample:\r\n```\r\nSpotify\r\n  .replacePlaylistTracks('1176458919', '2TkWjGCu8jurholsfdWtG4', 'spotify:track:4iV5W9uYEdYUVa79Axb7Rh, spotify:track:1301WleyT98MSxVHPZCA6M')\r\n  .then(function (data) {\r\n    console.log('tracks removed from playlist');\r\n  });\r\n```\r\n\r\n\r\n####Change a Playlist’s Details\r\nChange a playlist’s name and public/private state. (The user must, of course, own the playlist.) Changing a public playlist requires the ```playlist-modify-public``` scope. Changing a private playlist requires the ```playlist-modify-private``` scope.\r\n```javascript\r\nSpotify.updatePlaylistDetails('user_id', 'playlist_id', options);\r\n```\r\n#####Options Object (Optional)\r\n - name - string - Optional. The new name for the playlist, for example \"My New Playlist Title\".\r\n - public - Boolean - Optional. If true the playlist will be public, if false it will be private.\r\n\r\nExample:\r\n```javascript\r\nSpotify\r\n  .updatePlaylistDetails('1176458919', '2TkWjGCu8jurholsfdWtG4', { name: 'Updated Playlist Title' })\r\n  .then(function (data) {\r\n    console.log('Updated playlist details');\r\n  });\r\n```\r\n\r\n\r\n###User Profiles\r\nUser needs to be logged in to gain access to user profiles\r\n\r\n####Get a User’s Profile\r\nGet public profile information about a Spotify user.\r\n```javascript\r\nSpotify.getUser('user_id');\r\n```\r\nExample:\r\n```javascript\r\nSpotify.getUser('wizzler').then(function (data) {\r\n  console.log(data);\r\n});\r\n```\r\n\r\n\r\n####Get Current User’s Profile\r\nGet detailed profile information about the current user (including the current user’s username).\r\n```javascript\r\nSpotify.getCurrentUser();\r\n```\r\nExample:\r\n```javascript\r\nSpotify.getCurrentUser().then(function (data) {\r\n  console.log(data);\r\n});\r\n```\r\n\r\n\r\n###User Library *(may have name changes in next version)*\r\n####Get Current User’s Saved Tracks\r\nGet a list of the songs saved in the current Spotify user’s “Your Music” library. Requires the ```user-library-read``` scope.\r\n```javascript\r\nSpotify.getSavedUserTracks(options);\r\n```\r\n#####Options Object (Optional)\r\n - limit - Optional. The maximum number of objects to return. Default: 20. Minimum: 1. Maximum: 50. \r\n - offset - Optional. The index of the first object to return. Default: 0 (i.e., the first object). Use with limit to get the next set of objects. \r\n\r\n```javascript\r\nSpotify.getSavedUserTracks().then(function (data) {\r\n  console.log(data);\r\n});\r\n```\r\n\r\n####Check Current User’s Saved Tracks\r\nCheck if one or more tracks is already saved in the current Spotify user’s “Your Music” library. Requires the ```user-library-read``` scope.\r\n```javascript\r\nSpotify.userTracksContains('comma separated string or array of spotify track ids');\r\n```\r\nExample:\r\n```javascript\r\nSpotify.userTracksContains('0udZHhCi7p1YzMlvI4fXoK,3SF5puV5eb6bgRSxBeMOk9').then(function (data) {\r\n  console.log(data);\r\n});\r\n```\r\n\r\n\r\n####Save Tracks for Current User\r\nSave one or more tracks to the current user’s “Your Music” library. Requires the ```user-library-modify``` scope.\r\n```javascript\r\nSpotify.saveUserTracks('comma separated string or array of spotify track ids');\r\n```\r\nExample:\r\n```javascript\r\nSpotify.saveUserTracks('0udZHhCi7p1YzMlvI4fXoK,3SF5puV5eb6bgRSxBeMOk9').then(function (data) {\r\n  console.log(data);\r\n});\r\n```\r\n\r\n\r\n####Remove Tracks for Current User\r\nRemove one or more tracks from the current user’s “Your Music” library. Requires the ```user-library-modify``` scope.\r\n```javascript\r\nSpotify.removeUserTracks('comma separated string or array of spotify track ids');\r\n```\r\nExample:\r\n```javascript\r\nSpotify.removeUserTracks('0udZHhCi7p1YzMlvI4fXoK,3SF5puV5eb6bgRSxBeMOk9').then(function (data) {\r\n  console.log(data);\r\n});\r\n```\r\n\r\n\r\n\r\n\r\n\r\n###Authentication\r\n####Login\r\nWill open login window. Requires user to initiate as it will open a pop up window.\r\nRequires client id, callback uri and scope to be set in config.\r\n```javascript\r\nSpotify.login();\r\n```\r\n\r\nExample:\r\n```javascript\r\n$scope.login = function () {\r\n  Spotify.login();\r\n};\r\n```\r\n\r\n#### Example callback html\r\n```html\r\n<!DOCTYPE html>\r\n<html>\r\n<head>\r\n  <meta charset=\"utf-8\">\r\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\r\n  <title></title>\r\n  <script type='text/javascript'>//<![CDATA[ \r\n  window.onload=function(){\r\n    var target = window.self === window.top ? window.opener : window.parent;\r\n\r\n    var hash = window.location.hash;\r\n    if (hash) {\r\n        var token = window.location.hash.split('&')[0].split('=')[1];\r\n        // target.postMessage(token, 'http://example.com/'); // v0.7.0 and below\r\n        localStorage.setItem('spotify-token', token);\r\n    }\r\n\r\n  }//]]>  \r\n\r\n  </script>\r\n</head>\r\n<body>\r\n  \r\n</body>\r\n</html>\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}